{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeHttpRequestEndParams = void 0;\n\nvar debug = require('debug')('http normalizeHttpRequestEndParams');\n/**\n * Normalizes a list of arguments given to the `ClientRequest.end()`\n * method to always include `chunk`, `encoding`, and `callback`.\n * Returned values may be `null`.\n */\n\n\nfunction normalizeHttpRequestEndParams() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  debug('arguments', args);\n  var normalizedArgs = new Array(3).fill(null).map(function (value, index) {\n    return args[index] || value;\n  });\n  normalizedArgs.sort(function (a, b) {\n    // If first element is a function, move it rightwards.\n    if (typeof a === 'function') {\n      return 1;\n    } // If second element is a function, move the first leftwards.\n\n\n    if (typeof b === 'function') {\n      return -1;\n    } // If both elements are strings, preserve their original index.\n\n\n    if (typeof a === 'string' && typeof b === 'string') {\n      return normalizedArgs.indexOf(a) - normalizedArgs.indexOf(b);\n    }\n\n    return 0;\n  });\n  debug('normalized args', normalizedArgs);\n  return normalizedArgs;\n}\n\nexports.normalizeHttpRequestEndParams = normalizeHttpRequestEndParams;","map":{"version":3,"sources":["../../../../src/interceptors/ClientRequest/utils/normalizeHttpRequestEndParams.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAAP,CAAiB,oCAAjB,CAAd;AAkBA;;;;AAIG;;;AACH,SAAgB,6BAAhB,GAA6C;AAC3C,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA2B;AAA3B,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,EAAA,KAAK,CAAC,WAAD,EAAc,IAAd,CAAL;AACA,MAAM,cAAc,GAAG,IAAI,KAAJ,CAAU,CAAV,EACpB,IADoB,CACf,IADe,EAEpB,GAFoB,CAEhB,UAAC,KAAD,EAAQ,KAAR,EAAa;AAAK,WAAA,IAAI,CAAC,KAAD,CAAJ,IAAA,KAAA;AAAoB,GAFtB,CAAvB;AAIA,EAAA,cAAc,CAAC,IAAf,CAAoB,UAAC,CAAD,EAAI,CAAJ,EAAK;AACvB;AACA,QAAI,OAAO,CAAP,KAAa,UAAjB,EAA6B;AAC3B,aAAO,CAAP;AACD,KAJsB,CAMvB;;;AACA,QAAI,OAAO,CAAP,KAAa,UAAjB,EAA6B;AAC3B,aAAO,CAAC,CAAR;AACD,KATsB,CAWvB;;;AACA,QAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,OAAO,CAAP,KAAa,QAA1C,EAAoD;AAClD,aAAO,cAAc,CAAC,OAAf,CAAuB,CAAvB,IAA4B,cAAc,CAAC,OAAf,CAAuB,CAAvB,CAAnC;AACD;;AAED,WAAO,CAAP;AACD,GAjBD;AAmBA,EAAA,KAAK,CAAC,iBAAD,EAAoB,cAApB,CAAL;AACA,SAAO,cAAP;AACD;;AA7BD,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeHttpRequestEndParams = void 0;\nvar debug = require('debug')('http normalizeHttpRequestEndParams');\n/**\n * Normalizes a list of arguments given to the `ClientRequest.end()`\n * method to always include `chunk`, `encoding`, and `callback`.\n * Returned values may be `null`.\n */\nfunction normalizeHttpRequestEndParams() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    debug('arguments', args);\n    var normalizedArgs = new Array(3)\n        .fill(null)\n        .map(function (value, index) { return args[index] || value; });\n    normalizedArgs.sort(function (a, b) {\n        // If first element is a function, move it rightwards.\n        if (typeof a === 'function') {\n            return 1;\n        }\n        // If second element is a function, move the first leftwards.\n        if (typeof b === 'function') {\n            return -1;\n        }\n        // If both elements are strings, preserve their original index.\n        if (typeof a === 'string' && typeof b === 'string') {\n            return normalizedArgs.indexOf(a) - normalizedArgs.indexOf(b);\n        }\n        return 0;\n    });\n    debug('normalized args', normalizedArgs);\n    return normalizedArgs;\n}\nexports.normalizeHttpRequestEndParams = normalizeHttpRequestEndParams;\n//# sourceMappingURL=normalizeHttpRequestEndParams.js.map"]},"metadata":{},"sourceType":"script"}